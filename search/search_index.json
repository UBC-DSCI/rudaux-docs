{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation for Rudaux Welcome to the documentation for rudaux! For information on the motivation behind and development of rudaux, please read my blog post Designing Rudaux . For information on how to use Rudaux to integrate Canvas and JupyterHub, please read Using Rudaux . Setup Before setting up rudaux, it is important to have the proper infrastructure in place. Please see the DSCI 100 infrastructure repository for our reproducible infrastructure provisioning workflow. Rudaux needs a configuration file to operate. Please read the configuration documentation for more information and a sample config file. Log in to the server you will be executing rudaux commands on. Clone your instructors repository containing your config file and master (source) assignments. Initialize rudaux. Course Operations Find external tool ID in Canvas Pull student list from Canvas and sync with nbgrader. Add missing students to nbgrader database Delete students from database that have withdrawn from course. Pull assignments from config file. Add assignments to nbgrader database. Create student version of assignments with nbgrader assign. Commit these files to the instructors repository & push. Copy the student version to the public student repository. Commit these files to the students repository & push. Create assignments in Canvas. Generate urlencoded nbgitpuller links to JupyterHub, referencing the relevant notebook in the public students repository. Schedule grading. Add cron jobs to crontab which will initiate autograding at the assignment due date.","title":"Home"},{"location":"#documentation-for-rudaux","text":"Welcome to the documentation for rudaux! For information on the motivation behind and development of rudaux, please read my blog post Designing Rudaux . For information on how to use Rudaux to integrate Canvas and JupyterHub, please read Using Rudaux .","title":"Documentation for Rudaux"},{"location":"#setup","text":"Before setting up rudaux, it is important to have the proper infrastructure in place. Please see the DSCI 100 infrastructure repository for our reproducible infrastructure provisioning workflow. Rudaux needs a configuration file to operate. Please read the configuration documentation for more information and a sample config file. Log in to the server you will be executing rudaux commands on. Clone your instructors repository containing your config file and master (source) assignments. Initialize rudaux.","title":"Setup"},{"location":"#course-operations","text":"Find external tool ID in Canvas Pull student list from Canvas and sync with nbgrader. Add missing students to nbgrader database Delete students from database that have withdrawn from course. Pull assignments from config file. Add assignments to nbgrader database. Create student version of assignments with nbgrader assign. Commit these files to the instructors repository & push. Copy the student version to the public student repository. Commit these files to the students repository & push. Create assignments in Canvas. Generate urlencoded nbgitpuller links to JupyterHub, referencing the relevant notebook in the public students repository. Schedule grading. Add cron jobs to crontab which will initiate autograding at the assignment due date.","title":"Course Operations"},{"location":"config/","text":"Configuring Rudaux Assumptions Rudaux makes some important assumptions. In the future we hope to abstract away these assumptions. For reproducible provisioning of a compatible course infrastructure, see the DSCI 100 course infrastructure repository . You have a two-repository, instructors/students model for your course: The instructors repository contains everything that nbgrader needs to operate. The students repository just contains the release versions of assignments. You wish rudaux to pull, commit, and push to git on your behalf. This may be made optional . You have a Canvas Access Token in an environment variable accessible to rudaux. Because autograding is containerized, it is assumed your user will be able to execute docker run commands. If you schedule autograding : The machine you are executing rudaux commands on will be the same machine that autograding is executed on. If you wish to perform ZFS snapshotting : Rudaux does not perform ZFS snapshotting, but will look for a snapshot with the name of the assignment in question. Scheduling ZFS snapshots may be implemented . You have SSH keys or deploy keys set up for your repositories on the server you run rudaux. If you use HTTPS rather than SSH for git remotes, you will be prompted for your password. However, this will impair autograding. Configuration Options A configuration file should be included in the same directory where nbgrader operates. When creating your configuration file, you have two options: Save the options in a file named rudaux_config.py . This will keep your options for each program separate. Save the options in your nbgrader_config.py file. This will allow you to only maintain one config file. Canvas c.Canvas.course_url - str The URL of your Canvas distribution. Example: 'https://canvas.institution.edu' c.Canvas.course_id - int The Canvas ID of your course. If you open your course in canvas, this will appear as: https://canvas.institution.edu/courses/<course_id>/assignments c.Canvas.token_name ( str ) The name of the environment variable holding your Canvas Access Token . Default: 'CANVAS_TOKEN' c.Canvas.external_tool_name - str The name of your external tool in Canvas which represents your JupyterHub server. For more information read the ltiauthenticator documentation , which contains information on how to set up an external tool in Canvas. Default: 'Jupyter' c.Canvas.external_tool_level - str The level at which your external tool was created in Canvas. Acceptable values: ['course', 'account', 'group'] Default: 'course' Note : external_tool_name and external_tool_level are used to locate the ID of your external tool in Canvas to attach it to your assignment links. This links your LTI Consumer Key and LTI Consumer Secret to each launch request, authenticating your users. GitHub c.GitHub.ins_repo_url - str The location of your instructors repository where you will keep your solutions, graded assignments, and gradebook.db. Rudaux will detect the type of URL provided (HTTPS vs SSH). c.GitHub.stu_repo_url - str The location of your public student repository this will contain the release versions of your assignments. Rudaux will detect the type of URL provided (HTTPS vs SSH). c.GitHub.assignment_release_path - str The subpath of the student repository where assignments will be deposited. Default: 'materials' JupyterHub c.JupyterHub.hub_url - str The URL of your JupyterHub server. c.JupyterHub.base_url - str A JupyterHub prefix, if one is specified. In your jupyterhub_config.py, this would be named \"c.JupyterHub.base_url\" Default: \"\" ( an empty string ) Example: '/jupyter' c.JupyterHub.storage_path - str The location of your students' persistent storage. Example: '/tank/home/dsci100' c.JupyterHub.zfs - bool Are ZFS snapshots available? If so, we will utilize snapshotting to ensure that we are using a precise copy of the students' notebooks at the time the assignment closes. If not, we will simply read from the student directories. Default: False Course c.Course.tmp_dir - str The temporary directory that rudaux will clone your students' repository into for assignment release. Default: '~/tmp' c.Course.timezone - str The timezone which your due dates will be set and parsed in. Example: 'US/Pacific' c.Course.grading_image The docker image you will use to run nbgrader autograding. This should essentially be a copy of your students' docker image, plus nbgrader. Example: 'ubcdsci/r-dsci-grading' Example Dockerfiles from DSCI 100: Student Container Marking Container c.Course.assignments A list of your assignments with the following fields: name - str Required. Unique. The name of the assignment. Must conform to nbgrader naming conventions (i.e. must be the name of the folder containing the jupyter notebook). Example: 'homework_1' duedate - str Required. The date the assignment is due. Example: '2019-03-14' duetime - str Optional. The time the assignment is due. Default: '23:59:59' points - int Optional. The maximum possible points for this assignment. Default: 1 manual - bool Optional. Does the assignment require manual input (i.e. TA feedback)? If so, feedback reports will not be generated and grades will not be submitted to Canvas automatically. Default: False Note : Rudaux parses datetimes with the pendulum library\u2014acceptable date strings are listed in the pendulum docs . For example, if duedate were '2019-03-14' and duetime were '22:00:00' , they would be joined and parsed as '2019-03-14T22:00:00' . Sample rudaux_config.py","title":"Configuration"},{"location":"config/#configuring-rudaux","text":"","title":"Configuring Rudaux"},{"location":"config/#assumptions","text":"Rudaux makes some important assumptions. In the future we hope to abstract away these assumptions. For reproducible provisioning of a compatible course infrastructure, see the DSCI 100 course infrastructure repository . You have a two-repository, instructors/students model for your course: The instructors repository contains everything that nbgrader needs to operate. The students repository just contains the release versions of assignments. You wish rudaux to pull, commit, and push to git on your behalf. This may be made optional . You have a Canvas Access Token in an environment variable accessible to rudaux. Because autograding is containerized, it is assumed your user will be able to execute docker run commands. If you schedule autograding : The machine you are executing rudaux commands on will be the same machine that autograding is executed on. If you wish to perform ZFS snapshotting : Rudaux does not perform ZFS snapshotting, but will look for a snapshot with the name of the assignment in question. Scheduling ZFS snapshots may be implemented . You have SSH keys or deploy keys set up for your repositories on the server you run rudaux. If you use HTTPS rather than SSH for git remotes, you will be prompted for your password. However, this will impair autograding.","title":"Assumptions"},{"location":"config/#configuration-options","text":"A configuration file should be included in the same directory where nbgrader operates. When creating your configuration file, you have two options: Save the options in a file named rudaux_config.py . This will keep your options for each program separate. Save the options in your nbgrader_config.py file. This will allow you to only maintain one config file.","title":"Configuration Options"},{"location":"config/#canvas","text":"c.Canvas.course_url - str The URL of your Canvas distribution. Example: 'https://canvas.institution.edu' c.Canvas.course_id - int The Canvas ID of your course. If you open your course in canvas, this will appear as: https://canvas.institution.edu/courses/<course_id>/assignments c.Canvas.token_name ( str ) The name of the environment variable holding your Canvas Access Token . Default: 'CANVAS_TOKEN' c.Canvas.external_tool_name - str The name of your external tool in Canvas which represents your JupyterHub server. For more information read the ltiauthenticator documentation , which contains information on how to set up an external tool in Canvas. Default: 'Jupyter' c.Canvas.external_tool_level - str The level at which your external tool was created in Canvas. Acceptable values: ['course', 'account', 'group'] Default: 'course' Note : external_tool_name and external_tool_level are used to locate the ID of your external tool in Canvas to attach it to your assignment links. This links your LTI Consumer Key and LTI Consumer Secret to each launch request, authenticating your users.","title":"Canvas"},{"location":"config/#github","text":"c.GitHub.ins_repo_url - str The location of your instructors repository where you will keep your solutions, graded assignments, and gradebook.db. Rudaux will detect the type of URL provided (HTTPS vs SSH). c.GitHub.stu_repo_url - str The location of your public student repository this will contain the release versions of your assignments. Rudaux will detect the type of URL provided (HTTPS vs SSH). c.GitHub.assignment_release_path - str The subpath of the student repository where assignments will be deposited. Default: 'materials'","title":"GitHub"},{"location":"config/#jupyterhub","text":"c.JupyterHub.hub_url - str The URL of your JupyterHub server. c.JupyterHub.base_url - str A JupyterHub prefix, if one is specified. In your jupyterhub_config.py, this would be named \"c.JupyterHub.base_url\" Default: \"\" ( an empty string ) Example: '/jupyter' c.JupyterHub.storage_path - str The location of your students' persistent storage. Example: '/tank/home/dsci100' c.JupyterHub.zfs - bool Are ZFS snapshots available? If so, we will utilize snapshotting to ensure that we are using a precise copy of the students' notebooks at the time the assignment closes. If not, we will simply read from the student directories. Default: False","title":"JupyterHub"},{"location":"config/#course","text":"c.Course.tmp_dir - str The temporary directory that rudaux will clone your students' repository into for assignment release. Default: '~/tmp' c.Course.timezone - str The timezone which your due dates will be set and parsed in. Example: 'US/Pacific' c.Course.grading_image The docker image you will use to run nbgrader autograding. This should essentially be a copy of your students' docker image, plus nbgrader. Example: 'ubcdsci/r-dsci-grading' Example Dockerfiles from DSCI 100: Student Container Marking Container c.Course.assignments A list of your assignments with the following fields: name - str Required. Unique. The name of the assignment. Must conform to nbgrader naming conventions (i.e. must be the name of the folder containing the jupyter notebook). Example: 'homework_1' duedate - str Required. The date the assignment is due. Example: '2019-03-14' duetime - str Optional. The time the assignment is due. Default: '23:59:59' points - int Optional. The maximum possible points for this assignment. Default: 1 manual - bool Optional. Does the assignment require manual input (i.e. TA feedback)? If so, feedback reports will not be generated and grades will not be submitted to Canvas automatically. Default: False Note : Rudaux parses datetimes with the pendulum library\u2014acceptable date strings are listed in the pendulum docs . For example, if duedate were '2019-03-14' and duetime were '22:00:00' , they would be joined and parsed as '2019-03-14T22:00:00' . Sample rudaux_config.py","title":"Course"},{"location":"modules/","text":"Rudaux Modules from rudaux import Course , Assignment Course dsci100 = Course () dsci100 . assign () dsci100 . create_canvas_assignments () dsci100 . get_external_tool_id () dsci100 . get_students_from_canvas () dsci100 . schedule_grading () dsci100 . sync_nbgrader () Assignment class DataScienceAssignment ( Assignment ): course = dsci100 homework_1 = DataScienceAssignment ( 'homework_1' ) Similarly: homework_1 = DataScienceAssignment ( 'homework_1' , course = dsci100 ) class Assignment: Manipulate an assignment. Assignment ( name : str , duedate = None , duetime = None , points = 1 , manual = False , course = None ): homework_1 . course homework_1 . autograde () homework_1 . collect () homework_1 . feedback () homework_1 . grade () homework_1 . schedule_grading () homework_1 . submit () homework_1 . update_or_create_canvas_assignment () Command Line Interface Initialize/Update rudaux init Grade rudaux grade 'homework_1' course \\ . get_external_tool_id () \\ . get_students_from_canvas () \\ . sync_nbgrader () \\ . assign ( overwrite = args . overwrite ) \\ . create_canvas_assignments () \\ . schedule_grading () Submit rudaux submit 'homework_1'","title":"Modules"},{"location":"modules/#rudaux-modules","text":"from rudaux import Course , Assignment","title":"Rudaux Modules"},{"location":"modules/#course","text":"dsci100 = Course () dsci100 . assign () dsci100 . create_canvas_assignments () dsci100 . get_external_tool_id () dsci100 . get_students_from_canvas () dsci100 . schedule_grading () dsci100 . sync_nbgrader ()","title":"Course"},{"location":"modules/#assignment","text":"class DataScienceAssignment ( Assignment ): course = dsci100 homework_1 = DataScienceAssignment ( 'homework_1' ) Similarly: homework_1 = DataScienceAssignment ( 'homework_1' , course = dsci100 ) class Assignment: Manipulate an assignment. Assignment ( name : str , duedate = None , duetime = None , points = 1 , manual = False , course = None ): homework_1 . course homework_1 . autograde () homework_1 . collect () homework_1 . feedback () homework_1 . grade () homework_1 . schedule_grading () homework_1 . submit () homework_1 . update_or_create_canvas_assignment ()","title":"Assignment"},{"location":"modules/#command-line-interface","text":"","title":"Command Line Interface"},{"location":"modules/#initializeupdate","text":"rudaux init","title":"Initialize/Update"},{"location":"modules/#grade","text":"rudaux grade 'homework_1' course \\ . get_external_tool_id () \\ . get_students_from_canvas () \\ . sync_nbgrader () \\ . assign ( overwrite = args . overwrite ) \\ . create_canvas_assignments () \\ . schedule_grading ()","title":"Grade"},{"location":"modules/#submit","text":"rudaux submit 'homework_1'","title":"Submit"},{"location":"examples/functions/","text":"Examples of Function Calls Classes from rudaux import Course , Assignment Course dsci100 = Course ( '~/dsci100-instructors' ) Assignment class DataScienceAssignment ( Assignment ): course = dsci100 homework_1 = DataScienceAssignment ( 'homework_1' ) Similarly: homework_1 = DataScienceAssignment ( 'homework_1' , course = dsci100 ) High-level Interface (CLI) Initialize rudaux init Grade rudaux grade 'homework_1' course \\ . get_external_tool_id () \\ . get_students_from_canvas () \\ . sync_nbgrader () \\ . assign ( overwrite = args . overwrite ) \\ . create_canvas_assignments () \\ . schedule_grading () Submit rudaux submit 'homework_1'","title":"Functions"},{"location":"examples/functions/#examples-of-function-calls","text":"","title":"Examples of Function Calls"},{"location":"examples/functions/#classes","text":"from rudaux import Course , Assignment","title":"Classes"},{"location":"examples/functions/#course","text":"dsci100 = Course ( '~/dsci100-instructors' )","title":"Course"},{"location":"examples/functions/#assignment","text":"class DataScienceAssignment ( Assignment ): course = dsci100 homework_1 = DataScienceAssignment ( 'homework_1' ) Similarly: homework_1 = DataScienceAssignment ( 'homework_1' , course = dsci100 )","title":"Assignment"},{"location":"examples/functions/#high-level-interface-cli","text":"","title":"High-level Interface (CLI)"},{"location":"examples/functions/#initialize","text":"rudaux init","title":"Initialize"},{"location":"examples/functions/#grade","text":"rudaux grade 'homework_1' course \\ . get_external_tool_id () \\ . get_students_from_canvas () \\ . sync_nbgrader () \\ . assign ( overwrite = args . overwrite ) \\ . create_canvas_assignments () \\ . schedule_grading ()","title":"Grade"},{"location":"examples/functions/#submit","text":"rudaux submit 'homework_1'","title":"Submit"},{"location":"examples/objects/","text":"Examples of Objects LTI Launch Request { \"query_string\" : { \"custom_next\" : \"/jupyter/hub/user-redirect/git-pull?repo=https://github.com/binder-examples/requirements&subPath=index.ipynb\" }, \"form_data\" : { \"oauth_consumer_key\" : \"<redacted>\" , \"oauth_signature_method\" : \"HMAC-SHA1\" , \"oauth_timestamp\" : \"1529516978\" , \"oauth_nonce\" : \"<redacted>\" , \"oauth_version\" : \"1.0\" , \"context_id\" : \"df6178b861774822eec73639c1f5808ebf9b3259\" , \"context_label\" : \"DSCI100\" , \"context_title\" : \"DSCI 100\" , \"custom_canvas_api_domain\" : \"canvas.ubc.ca\" , \"custom_canvas_assignment_id\" : \"151504\" , \"custom_canvas_assignment_points_possible\" : \"0\" , \"custom_canvas_assignment_title\" : \"Example Assignment\" , \"custom_canvas_course_id\" : \"5394\" , \"custom_canvas_enrollment_state\" : \"active\" , \"custom_canvas_user_id\" : \"185091\" , \"custom_canvas_user_login_id\" : \"OB2D4G5QJS00\" , \"custom_canvas_workflow_state\" : \"claimed\" , \"custom_next\" : \"/jupyter/hub/user-redirect/git-pull?repo=https://github.com/binder-examples/requirements&subPath=index.ipynb\" , \"ext_ims_lis_basic_outcome_url\" : \"https://canvas.ubc.ca/api/lti/v1/tools/2399/ext_grade_passback\" , \"ext_lti_assignment_id\" : \"657aadda-f21d-41a3-9125-2fc67dc1e07e\" , \"ext_outcome_data_values_accepted\" : \"url,text\" , \"ext_outcome_result_total_score_accepted\" : \"true\" , \"ext_outcome_submission_submitted_at_accepted\" : \"true\" , \"ext_outcomes_tool_placement_url\" : \"https://canvas.ubc.ca/api/lti/v1/turnitin/outcomes_placement/2399\" , \"ext_roles\" : \"urn:lti:instrole:ims/lis/Instructor,urn:lti:instrole:ims/lis/Student,urn:lti:role:ims/lis/Instructor,urn:lti:sysrole:ims/lis/User\" , \"launch_presentation_document_target\" : \"iframe\" , \"launch_presentation_locale\" : \"en-CA\" , \"launch_presentation_return_url\" : \"https://canvas.ubc.ca/courses/5394/external_content/success/external_tool_redirect\" , \"lis_outcome_service_url\" : \"https://canvas.ubc.ca/api/lti/v1/tools/2399/grade_passback\" , \"lis_person_contact_email_primary\" : \"samuel.hinshaw@gmail.com\" , \"lis_person_name_family\" : \"Hinshaw\" , \"lis_person_name_full\" : \"Samuel Hinshaw\" , \"lis_person_name_given\" : \"Samuel\" , \"lis_person_sourcedid\" : \"90088155\" , \"lti_message_type\" : \"basic-lti-launch-request\" , \"lti_version\" : \"LTI-1p0\" , \"oauth_callback\" : \"about:blank\" , \"resource_link_id\" : \"954efa27cf26a83ebcb782eeb701c904cc93cd6d\" , \"resource_link_title\" : \"Example Assignment\" , \"roles\" : \"Instructor\" , \"tool_consumer_info_product_family_code\" : \"canvas\" , \"tool_consumer_info_version\" : \"cloud\" , \"tool_consumer_instance_contact_email\" : \"notifications@instructure.com\" , \"tool_consumer_instance_guid\" : \"WiYEKZJIYozJ60jtONj9XJdFwpxtMAY075lLT4pj:canvas-lms\" , \"tool_consumer_instance_name\" : \"The University of British Columbia\" , \"user_id\" : \"56adf6953222e4ac2d851361684c73f392b55260\" , \"user_image\" : \"https://canvas.ubc.ca/images/thumbnails/760593/qr2ss6cgf7q1SCbCH8axswflnIfFZep5XNIkNTEB\" , \"oauth_signature\" : \"<redacted>\" } } Sample rudaux_config.py #=======================================# # Canvas # #=======================================# # The URL of your Canvas installation c . Canvas . canvas_url = 'https://canvas.ubc.ca' # The ID of your course in Canvas. If you open your course in canvas, this will # appear as: # https://canvas.institution.edu/courses/<course_id>/assignments c . Canvas . course_id = 5394 # The name of the environment variable storing you Canvas API Token # https://canvas.instructure.com/doc/api/file.oauth.html#manual-token-generation # Defaults to 'CANVAS_TOKEN' c . Canvas . token_name = 'CANVAS_TOKEN' # The name of the external tool in Canvas which represents your JupyterHub server # Defaults to \"Jupyter\" c . Canvas . external_tool_name = 'Jupyter' # The level at which your external tool was created in Canvas # Can be 'course', 'account' or 'group' # Defaults to \"course\" c . Canvas . external_tool_level = 'course' #=======================================# # GitHub # #=======================================# # The location of your instructors repository where you will keep your # solutions, graded assignments, and gradebook.db # c.GitHub.ins_repo_url = 'https://github.ubc.ca/hinshaws/dsci_100_instructors' c . GitHub . ins_repo_url = 'git@github.ubc.ca:hinshaws/DSCI_100_instructors.git' # The location of your public student repository # this will contain the release versions of your assignments # c.GitHub.stu_repo_url = 'https://github.com/samhinshaw/dsci-100' c . GitHub . stu_repo_url = 'git@github.com:samhinshaw/dsci-100.git' # the subpath of the student repository where assignments will be deposited. # defaults to 'materials' if none is specified c . GitHub . assignment_release_path = 'materials' # The following options are not currently supported # default if not specified is 'GITHUB_PAT' # c.GitHub.github_token_name = 'GHE_PAT' # You can specify multiple keys, just paste the url you specified above into the URL fields # c.GitHub.token_names = [ # { # \"url\": \"github.com\", # \"token_name\": \"GITHUB_PAT\" # }, # { # \"domain\": \"github.ubc.ca\", # \"token_name\": \"GHE_PAT\" # }, # ] #=======================================# # JupyterHub # #=======================================# # The URL that your JupyterHub is located at c . JupyterHub . hub_url = 'https://hub-prod-dsci.stat.ubc.ca' # Any hub prefix that you have specified. In your jupyterhub_config.py, this # would be named \"c.JupyterHub.base_url\" c . JupyterHub . base_url = '/jupyter' # The location of your students' persistent storage # c.JupyterHub.storage_path = '/tank/home/dsci100' c . JupyterHub . storage_path = '/nfs/hub-prod-dsc/' # temporarily changed # Is your persistent storage solution ZFS-based? (default: False) # If so, we will utilize snapshotting to ensure that we are using a precise copy # of the students' notebooks at the time the assignment closes. If not, we will # simply read from the student directories. c . JupyterHub . zfs = True #=======================================# # Course # #=======================================# # Defaults to $HOME/tmp # c.Course.tmp_dir = '~/tmp' # Timezone for which your due dates will be set and parsed c . Course . timezone = 'US/Pacific' # The docker image you will use to run nbgrader autograding. # This should essentially be a copy of your students' docker image, plus nbgrader. # We wrote our Dockerfile to inherit from our student's docker image. c . Course . grading_image = 'samhinshaw/r-dsci-grading' # c.Course.grading_image = 'ubcdsci/r-dsci-grading' #===============# # Assignments # #===============# # These must match the name of the folder containing the jupyter notebook in # your 'source' directory. If no points specified, defaults to 0 points. # NOTE: If no time specified for due date, defaults to 23:59:59. # We parse dates with the pendulum library, so you can see what date inputs are # acceptable in their docs: https://pendulum.eustace.io/docs/#rfc-3339 c . Course . assignments = [ { \"name\" : \"week_1\" , \"duedate\" : \"2019-08-14\" , \"duetime\" : \"23:59:59\" , \"points\" : 2 , \"manual\" : True }, { \"name\" : \"homework_1\" , \"duedate\" : \"2019-08-15\" , \"duetime\" : \"11:00:00\" , \"points\" : 5 }, { \"name\" : \"ps1\" , \"duedate\" : \"2019-08-15\" , \"duetime\" : \"15:31:00\" , \"points\" : 4 }, { \"name\" : \"week_2\" , \"duedate\" : \"2019-08-16\" , \"duetime\" : \"23:59:59\" , }, { \"name\" : \"homework_2\" , \"duedate\" : \"2019-08-16\" , \"duetime\" : \"06:00:00\" , \"points\" : 6 }, { \"name\" : \"week_6\" , \"duedate\" : \"2019-08-18\" , \"duetime\" : \"23:59:59\" , \"points\" : 2 , \"manual\" : True }, { \"name\" : \"week_7\" , \"duedate\" : \"2019-08-19\" , \"duetime\" : \"23:59:59\" , \"points\" : 3 }, ]","title":"Objects"},{"location":"examples/objects/#examples-of-objects","text":"","title":"Examples of Objects"},{"location":"examples/objects/#lti-launch-request","text":"{ \"query_string\" : { \"custom_next\" : \"/jupyter/hub/user-redirect/git-pull?repo=https://github.com/binder-examples/requirements&subPath=index.ipynb\" }, \"form_data\" : { \"oauth_consumer_key\" : \"<redacted>\" , \"oauth_signature_method\" : \"HMAC-SHA1\" , \"oauth_timestamp\" : \"1529516978\" , \"oauth_nonce\" : \"<redacted>\" , \"oauth_version\" : \"1.0\" , \"context_id\" : \"df6178b861774822eec73639c1f5808ebf9b3259\" , \"context_label\" : \"DSCI100\" , \"context_title\" : \"DSCI 100\" , \"custom_canvas_api_domain\" : \"canvas.ubc.ca\" , \"custom_canvas_assignment_id\" : \"151504\" , \"custom_canvas_assignment_points_possible\" : \"0\" , \"custom_canvas_assignment_title\" : \"Example Assignment\" , \"custom_canvas_course_id\" : \"5394\" , \"custom_canvas_enrollment_state\" : \"active\" , \"custom_canvas_user_id\" : \"185091\" , \"custom_canvas_user_login_id\" : \"OB2D4G5QJS00\" , \"custom_canvas_workflow_state\" : \"claimed\" , \"custom_next\" : \"/jupyter/hub/user-redirect/git-pull?repo=https://github.com/binder-examples/requirements&subPath=index.ipynb\" , \"ext_ims_lis_basic_outcome_url\" : \"https://canvas.ubc.ca/api/lti/v1/tools/2399/ext_grade_passback\" , \"ext_lti_assignment_id\" : \"657aadda-f21d-41a3-9125-2fc67dc1e07e\" , \"ext_outcome_data_values_accepted\" : \"url,text\" , \"ext_outcome_result_total_score_accepted\" : \"true\" , \"ext_outcome_submission_submitted_at_accepted\" : \"true\" , \"ext_outcomes_tool_placement_url\" : \"https://canvas.ubc.ca/api/lti/v1/turnitin/outcomes_placement/2399\" , \"ext_roles\" : \"urn:lti:instrole:ims/lis/Instructor,urn:lti:instrole:ims/lis/Student,urn:lti:role:ims/lis/Instructor,urn:lti:sysrole:ims/lis/User\" , \"launch_presentation_document_target\" : \"iframe\" , \"launch_presentation_locale\" : \"en-CA\" , \"launch_presentation_return_url\" : \"https://canvas.ubc.ca/courses/5394/external_content/success/external_tool_redirect\" , \"lis_outcome_service_url\" : \"https://canvas.ubc.ca/api/lti/v1/tools/2399/grade_passback\" , \"lis_person_contact_email_primary\" : \"samuel.hinshaw@gmail.com\" , \"lis_person_name_family\" : \"Hinshaw\" , \"lis_person_name_full\" : \"Samuel Hinshaw\" , \"lis_person_name_given\" : \"Samuel\" , \"lis_person_sourcedid\" : \"90088155\" , \"lti_message_type\" : \"basic-lti-launch-request\" , \"lti_version\" : \"LTI-1p0\" , \"oauth_callback\" : \"about:blank\" , \"resource_link_id\" : \"954efa27cf26a83ebcb782eeb701c904cc93cd6d\" , \"resource_link_title\" : \"Example Assignment\" , \"roles\" : \"Instructor\" , \"tool_consumer_info_product_family_code\" : \"canvas\" , \"tool_consumer_info_version\" : \"cloud\" , \"tool_consumer_instance_contact_email\" : \"notifications@instructure.com\" , \"tool_consumer_instance_guid\" : \"WiYEKZJIYozJ60jtONj9XJdFwpxtMAY075lLT4pj:canvas-lms\" , \"tool_consumer_instance_name\" : \"The University of British Columbia\" , \"user_id\" : \"56adf6953222e4ac2d851361684c73f392b55260\" , \"user_image\" : \"https://canvas.ubc.ca/images/thumbnails/760593/qr2ss6cgf7q1SCbCH8axswflnIfFZep5XNIkNTEB\" , \"oauth_signature\" : \"<redacted>\" } }","title":"LTI Launch Request"},{"location":"examples/objects/#sample-rudaux_configpy","text":"#=======================================# # Canvas # #=======================================# # The URL of your Canvas installation c . Canvas . canvas_url = 'https://canvas.ubc.ca' # The ID of your course in Canvas. If you open your course in canvas, this will # appear as: # https://canvas.institution.edu/courses/<course_id>/assignments c . Canvas . course_id = 5394 # The name of the environment variable storing you Canvas API Token # https://canvas.instructure.com/doc/api/file.oauth.html#manual-token-generation # Defaults to 'CANVAS_TOKEN' c . Canvas . token_name = 'CANVAS_TOKEN' # The name of the external tool in Canvas which represents your JupyterHub server # Defaults to \"Jupyter\" c . Canvas . external_tool_name = 'Jupyter' # The level at which your external tool was created in Canvas # Can be 'course', 'account' or 'group' # Defaults to \"course\" c . Canvas . external_tool_level = 'course' #=======================================# # GitHub # #=======================================# # The location of your instructors repository where you will keep your # solutions, graded assignments, and gradebook.db # c.GitHub.ins_repo_url = 'https://github.ubc.ca/hinshaws/dsci_100_instructors' c . GitHub . ins_repo_url = 'git@github.ubc.ca:hinshaws/DSCI_100_instructors.git' # The location of your public student repository # this will contain the release versions of your assignments # c.GitHub.stu_repo_url = 'https://github.com/samhinshaw/dsci-100' c . GitHub . stu_repo_url = 'git@github.com:samhinshaw/dsci-100.git' # the subpath of the student repository where assignments will be deposited. # defaults to 'materials' if none is specified c . GitHub . assignment_release_path = 'materials' # The following options are not currently supported # default if not specified is 'GITHUB_PAT' # c.GitHub.github_token_name = 'GHE_PAT' # You can specify multiple keys, just paste the url you specified above into the URL fields # c.GitHub.token_names = [ # { # \"url\": \"github.com\", # \"token_name\": \"GITHUB_PAT\" # }, # { # \"domain\": \"github.ubc.ca\", # \"token_name\": \"GHE_PAT\" # }, # ] #=======================================# # JupyterHub # #=======================================# # The URL that your JupyterHub is located at c . JupyterHub . hub_url = 'https://hub-prod-dsci.stat.ubc.ca' # Any hub prefix that you have specified. In your jupyterhub_config.py, this # would be named \"c.JupyterHub.base_url\" c . JupyterHub . base_url = '/jupyter' # The location of your students' persistent storage # c.JupyterHub.storage_path = '/tank/home/dsci100' c . JupyterHub . storage_path = '/nfs/hub-prod-dsc/' # temporarily changed # Is your persistent storage solution ZFS-based? (default: False) # If so, we will utilize snapshotting to ensure that we are using a precise copy # of the students' notebooks at the time the assignment closes. If not, we will # simply read from the student directories. c . JupyterHub . zfs = True #=======================================# # Course # #=======================================# # Defaults to $HOME/tmp # c.Course.tmp_dir = '~/tmp' # Timezone for which your due dates will be set and parsed c . Course . timezone = 'US/Pacific' # The docker image you will use to run nbgrader autograding. # This should essentially be a copy of your students' docker image, plus nbgrader. # We wrote our Dockerfile to inherit from our student's docker image. c . Course . grading_image = 'samhinshaw/r-dsci-grading' # c.Course.grading_image = 'ubcdsci/r-dsci-grading' #===============# # Assignments # #===============# # These must match the name of the folder containing the jupyter notebook in # your 'source' directory. If no points specified, defaults to 0 points. # NOTE: If no time specified for due date, defaults to 23:59:59. # We parse dates with the pendulum library, so you can see what date inputs are # acceptable in their docs: https://pendulum.eustace.io/docs/#rfc-3339 c . Course . assignments = [ { \"name\" : \"week_1\" , \"duedate\" : \"2019-08-14\" , \"duetime\" : \"23:59:59\" , \"points\" : 2 , \"manual\" : True }, { \"name\" : \"homework_1\" , \"duedate\" : \"2019-08-15\" , \"duetime\" : \"11:00:00\" , \"points\" : 5 }, { \"name\" : \"ps1\" , \"duedate\" : \"2019-08-15\" , \"duetime\" : \"15:31:00\" , \"points\" : 4 }, { \"name\" : \"week_2\" , \"duedate\" : \"2019-08-16\" , \"duetime\" : \"23:59:59\" , }, { \"name\" : \"homework_2\" , \"duedate\" : \"2019-08-16\" , \"duetime\" : \"06:00:00\" , \"points\" : 6 }, { \"name\" : \"week_6\" , \"duedate\" : \"2019-08-18\" , \"duetime\" : \"23:59:59\" , \"points\" : 2 , \"manual\" : True }, { \"name\" : \"week_7\" , \"duedate\" : \"2019-08-19\" , \"duetime\" : \"23:59:59\" , \"points\" : 3 }, ]","title":"Sample rudaux_config.py"}]}