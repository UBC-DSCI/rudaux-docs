{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rudaux Documentation Welcome to the documentation for rudaux! For information on the motivation behind and development of rudaux, please read my blog post Designing Rudaux . For information on how to use Rudaux to integrate Canvas and JupyterHub, please read Using Rudaux . Installation pip install rudaux Setup Before setting up rudaux, it is important to have the proper infrastructure in place. Please see the DSCI 100 infrastructure repository for our reproducible infrastructure provisioning workflow. Note : rudaux currently requires a fork of nbgrader to work properly ( more information ): pip install git+git://github.com/samhinshaw/nbgrader.git Once your servers are set up and your dependencies installed, rudaux needs a configuration file to operate. Please read the configuration documentation for more information and a sample config file. Log in to the server you will be executing rudaux commands on. Clone your instructors repository containing your config file and master (source) assignments. Initialize rudaux. Usage Command-Line Interface See command-line interface . Python API See API .","title":"Home"},{"location":"#rudaux-documentation","text":"Welcome to the documentation for rudaux! For information on the motivation behind and development of rudaux, please read my blog post Designing Rudaux . For information on how to use Rudaux to integrate Canvas and JupyterHub, please read Using Rudaux .","title":"Rudaux Documentation"},{"location":"#installation","text":"pip install rudaux","title":"Installation"},{"location":"#setup","text":"Before setting up rudaux, it is important to have the proper infrastructure in place. Please see the DSCI 100 infrastructure repository for our reproducible infrastructure provisioning workflow. Note : rudaux currently requires a fork of nbgrader to work properly ( more information ): pip install git+git://github.com/samhinshaw/nbgrader.git Once your servers are set up and your dependencies installed, rudaux needs a configuration file to operate. Please read the configuration documentation for more information and a sample config file. Log in to the server you will be executing rudaux commands on. Clone your instructors repository containing your config file and master (source) assignments. Initialize rudaux.","title":"Setup"},{"location":"#usage","text":"","title":"Usage"},{"location":"#command-line-interface","text":"See command-line interface .","title":"Command-Line Interface"},{"location":"#python-api","text":"See API .","title":"Python API"},{"location":"api/","text":"Rudaux API Documentation API documentation for rudaux's primary classes: Course and Assignment`. For some examples of how to use these functions, please see API Usage . Course Course object for manipulating an entire Canvas/JupyterHub/nbgrader course from rudaux import Course Instantiation Course ( course_dir = None , auto = False ) Parameters course_dir - str The course directory containing your course configuration files. ( rudaux_config.py and/or nbgrader_config.py ) This should also be your nbgrader directory. Currently, it is assumed that this is your private instructors' repository. If none is provided, defaults to the current working directory. Default : os.getcwd() auto - bool Suppress all prompts, automatically answering yes. Default : False Returns - Course A Course object for manipulating an entire Canvas/JupyterHub/nbgrader course. Methods .get_external_tool_id() \u2192 Course Find the ID of the external tool created in Canvas that represents your JupyterHub server. This is necessary to link your LTI launch keys to assignment links created in Canvas. .get_students_from_canvas() \u2192 Course Get the course student list from Canvas. .sync_nbgrader() \u2192 Course Sync student and assignment lists between nbgrader and Canvas. Add students into nbgrader gradebook that are present in Canvas. Remove students from nbgrader gradebook that are not present in Canvas. Add assignments to gradebook which are present in config, but not in gradebook. Remove assignments from gradebook which are no longer present in config. .assign(assignments, overwrite) \u2192 Course Commits Pushes Assign assignments for a course. Parameters assignments - Union[List[str], str] The name or names of the assignments you wish to assign. Defaults to all assignments. overwrite - bool Bypass overwrite prompts and nuke preexisting directories. Default : False .create_canvas_assignments() \u2192 Course Create assignments in Canvas. .schedule_grading() \u2192 Course Schedule auto-grading cron jobs for all assignments. Assignment Assignment object for manipulating individual assignments. from rudaux import Assignment Instantiation Assignment ( name , duedate = None , duetime = '23:59:59' , points = 1 , manual = False , course = None ) Parameters name - str The assignment's name. This should be compatible with nbgrader's file naming convention. Required. Example: 'homework_1' duedate - str The assignment's due date. Required. Example: '2019-03-14' duetime - str The assignment's due time. Default : '23:59:59' points - int The number of points the assignment is worth. Default : 1 manual - bool Is manual grading required? Default : False course - Course The course the assignment belongs to. Optional. Recommended usage is to subclass Assignment with the course as a class variable. Returns - Assignment An assignment object for performing different operations on a given assignment. Methods .update_or_create_canvas_assignment() \u2192 str Search for an assignment in Canvas by assignment name. If an assignment is found, update it. If not, create it. Returns A reporting status, whether the assignment was updated or created. .schedule_grading() \u2192 Dict[str, str] Schedule grading of an assignment by adding cron jobs to initialize auto-grading. The job will be scheduled to run at the assignment's due datetime. If no auto-grading job for that assignment exists in cron, create a job. If an auto-grading job for that assignment is already scheduled in cron, update the job. The job takes the following format: Initialize SSH agent Add instructors & students SSH-keys to SSH agent Run `rudaux grade` with output redirected to a log file in the instructors' repository Returns A status reporting dictionary with the keys 'close_time' and 'action'. .collect() \u2192 Assignment Commits Pushes Collect student copies an assignment. Copy your students' notebooks from the fileserver into the instructors repo submitted/ directory. This also creates a submission in the gradebook on behalf of each student, which is necessary for nbgrader to record grades in the gradebook. If the student fileserver is a ZFS filesystem, the closest snapshot that occurred after the due date will be used. This requires c.JupyterHub.zfs_regex and c.JupyterHub.zfs_datetime_pattern to be set in the course configuration. .grade() \u2192 Assignment Commits Pushes Auto-grade an assignment within a docker container. .feedback() \u2192 Assignment Commits Pushes Generate feedback reports for student assignments. .submit() \u2192 Assignment Commits Pushes Upload students' grades to Canvas. Note: The functionality to upload generated feedback is the only piece of rudaux that has yet to be implemented. Currently, .submit() only uploads the student's grade to Canvas.","title":"API"},{"location":"api/#rudaux-api-documentation","text":"API documentation for rudaux's primary classes: Course and Assignment`. For some examples of how to use these functions, please see API Usage .","title":"Rudaux API Documentation"},{"location":"api/#course","text":"Course object for manipulating an entire Canvas/JupyterHub/nbgrader course from rudaux import Course","title":"Course"},{"location":"api/#instantiation","text":"Course ( course_dir = None , auto = False ) Parameters course_dir - str The course directory containing your course configuration files. ( rudaux_config.py and/or nbgrader_config.py ) This should also be your nbgrader directory. Currently, it is assumed that this is your private instructors' repository. If none is provided, defaults to the current working directory. Default : os.getcwd() auto - bool Suppress all prompts, automatically answering yes. Default : False Returns - Course A Course object for manipulating an entire Canvas/JupyterHub/nbgrader course.","title":"Instantiation"},{"location":"api/#methods","text":".get_external_tool_id() \u2192 Course Find the ID of the external tool created in Canvas that represents your JupyterHub server. This is necessary to link your LTI launch keys to assignment links created in Canvas. .get_students_from_canvas() \u2192 Course Get the course student list from Canvas. .sync_nbgrader() \u2192 Course Sync student and assignment lists between nbgrader and Canvas. Add students into nbgrader gradebook that are present in Canvas. Remove students from nbgrader gradebook that are not present in Canvas. Add assignments to gradebook which are present in config, but not in gradebook. Remove assignments from gradebook which are no longer present in config. .assign(assignments, overwrite) \u2192 Course Commits Pushes Assign assignments for a course. Parameters assignments - Union[List[str], str] The name or names of the assignments you wish to assign. Defaults to all assignments. overwrite - bool Bypass overwrite prompts and nuke preexisting directories. Default : False .create_canvas_assignments() \u2192 Course Create assignments in Canvas. .schedule_grading() \u2192 Course Schedule auto-grading cron jobs for all assignments.","title":"Methods"},{"location":"api/#assignment","text":"Assignment object for manipulating individual assignments. from rudaux import Assignment","title":"Assignment"},{"location":"api/#instantiation_1","text":"Assignment ( name , duedate = None , duetime = '23:59:59' , points = 1 , manual = False , course = None ) Parameters name - str The assignment's name. This should be compatible with nbgrader's file naming convention. Required. Example: 'homework_1' duedate - str The assignment's due date. Required. Example: '2019-03-14' duetime - str The assignment's due time. Default : '23:59:59' points - int The number of points the assignment is worth. Default : 1 manual - bool Is manual grading required? Default : False course - Course The course the assignment belongs to. Optional. Recommended usage is to subclass Assignment with the course as a class variable. Returns - Assignment An assignment object for performing different operations on a given assignment.","title":"Instantiation"},{"location":"api/#methods_1","text":".update_or_create_canvas_assignment() \u2192 str Search for an assignment in Canvas by assignment name. If an assignment is found, update it. If not, create it. Returns A reporting status, whether the assignment was updated or created. .schedule_grading() \u2192 Dict[str, str] Schedule grading of an assignment by adding cron jobs to initialize auto-grading. The job will be scheduled to run at the assignment's due datetime. If no auto-grading job for that assignment exists in cron, create a job. If an auto-grading job for that assignment is already scheduled in cron, update the job. The job takes the following format: Initialize SSH agent Add instructors & students SSH-keys to SSH agent Run `rudaux grade` with output redirected to a log file in the instructors' repository Returns A status reporting dictionary with the keys 'close_time' and 'action'. .collect() \u2192 Assignment Commits Pushes Collect student copies an assignment. Copy your students' notebooks from the fileserver into the instructors repo submitted/ directory. This also creates a submission in the gradebook on behalf of each student, which is necessary for nbgrader to record grades in the gradebook. If the student fileserver is a ZFS filesystem, the closest snapshot that occurred after the due date will be used. This requires c.JupyterHub.zfs_regex and c.JupyterHub.zfs_datetime_pattern to be set in the course configuration. .grade() \u2192 Assignment Commits Pushes Auto-grade an assignment within a docker container. .feedback() \u2192 Assignment Commits Pushes Generate feedback reports for student assignments. .submit() \u2192 Assignment Commits Pushes Upload students' grades to Canvas. Note: The functionality to upload generated feedback is the only piece of rudaux that has yet to be implemented. Currently, .submit() only uploads the student's grade to Canvas.","title":"Methods"},{"location":"cli/","text":"Command-Line Interface Rudaux was designed to be used from the command line or from within Python. The command line interface provides quick access rudaux's most commonly needed functionality. The rudaux CLI works in a 2-step process: A command parser parses rudaux's CLI commands and executes the corresponding functions. A command module that contains function definitions to be called by the command parser. Initialize Course Command: rudaux init Help Text: usage: rudaux init [-h] [--dir DIRECTORY] [--auto] [--overwrite] optional arguments: -h, --help show this help message and exit --dir DIRECTORY The directory containing configuration files. --auto, -a Tell rudaux this is not an interactive shell, do not prompt! --overwrite, -o Suppress overwrite warnings and nuke any existing directories with abandon! Grade Assignment Note: The functionality to upload generated feedback is the only piece of rudaux that has yet to be implemented. Currently, rudaux only uploads the student's grade to Canvas. Command: rudaux grade 'assignment_name' Help Text: usage: rudaux grade [-h] [--dir DIRECTORY] [--auto] [--manual] name positional arguments: name Name of the assignment to grade. optional arguments: -h, --help show this help message and exit --dir DIRECTORY The directory containing configuration files. --auto, -a Tell rudaux this is not an interactive shell, do not prompt! --manual, -m Manual grading is necessary. Submit Assignment Note: The functionality to upload generated feedback is the only piece of rudaux that has yet to be implemented. Currently, rudaux only uploads the student's grade to Canvas. Command: rudaux submit 'assignment_name' Help Text: usage: rudaux submit [-h] [--no-feedback] [--dir DIRECTORY] name positional arguments: name Name of the assignment to grade. optional arguments: -h, --help show this help message and exit --no-feedback, -n Skip feedback generation. --dir DIRECTORY The directory containing configuration files.","title":"CLI"},{"location":"cli/#command-line-interface","text":"Rudaux was designed to be used from the command line or from within Python. The command line interface provides quick access rudaux's most commonly needed functionality. The rudaux CLI works in a 2-step process: A command parser parses rudaux's CLI commands and executes the corresponding functions. A command module that contains function definitions to be called by the command parser.","title":"Command-Line Interface"},{"location":"cli/#initialize-course","text":"","title":"Initialize Course"},{"location":"cli/#command","text":"rudaux init","title":"Command:"},{"location":"cli/#help-text","text":"usage: rudaux init [-h] [--dir DIRECTORY] [--auto] [--overwrite] optional arguments: -h, --help show this help message and exit --dir DIRECTORY The directory containing configuration files. --auto, -a Tell rudaux this is not an interactive shell, do not prompt! --overwrite, -o Suppress overwrite warnings and nuke any existing directories with abandon!","title":"Help Text:"},{"location":"cli/#grade-assignment","text":"Note: The functionality to upload generated feedback is the only piece of rudaux that has yet to be implemented. Currently, rudaux only uploads the student's grade to Canvas.","title":"Grade Assignment"},{"location":"cli/#command_1","text":"rudaux grade 'assignment_name'","title":"Command:"},{"location":"cli/#help-text_1","text":"usage: rudaux grade [-h] [--dir DIRECTORY] [--auto] [--manual] name positional arguments: name Name of the assignment to grade. optional arguments: -h, --help show this help message and exit --dir DIRECTORY The directory containing configuration files. --auto, -a Tell rudaux this is not an interactive shell, do not prompt! --manual, -m Manual grading is necessary.","title":"Help Text:"},{"location":"cli/#submit-assignment","text":"Note: The functionality to upload generated feedback is the only piece of rudaux that has yet to be implemented. Currently, rudaux only uploads the student's grade to Canvas.","title":"Submit Assignment"},{"location":"cli/#command_2","text":"rudaux submit 'assignment_name'","title":"Command:"},{"location":"cli/#help-text_2","text":"usage: rudaux submit [-h] [--no-feedback] [--dir DIRECTORY] name positional arguments: name Name of the assignment to grade. optional arguments: -h, --help show this help message and exit --no-feedback, -n Skip feedback generation. --dir DIRECTORY The directory containing configuration files.","title":"Help Text:"},{"location":"config/","text":"Configuring Rudaux Assumptions Rudaux makes some important assumptions. In the future we hope to abstract away these assumptions. For reproducible provisioning of a compatible course infrastructure, see the DSCI 100 course infrastructure repository . You have a two-repository, instructors/students model for your course: The instructors repository contains everything that nbgrader needs to operate. The students repository just contains the release versions of assignments. You wish rudaux to pull, commit, and push to git on your behalf. This may be made optional . You have a Canvas Access Token in an environment variable accessible to rudaux. Because autograding is containerized, it is assumed your user will be able to execute docker run commands. If you schedule autograding : The machine you are executing rudaux commands on will be the same machine that autograding is executed on. If you wish to perform ZFS snapshotting : Rudaux does not perform ZFS snapshotting, but will look for a snapshot with the name of the assignment in question. Scheduling ZFS snapshots may be implemented . You have SSH keys or deploy keys set up for your repositories on the server you run rudaux. If you use HTTPS rather than SSH for git remotes, you will be prompted for your password. However, this will impair autograding. Configuration Options A configuration file should be included in the same directory where nbgrader operates. When creating your configuration file, you have two options: Save the options in a file named rudaux_config.py . This will keep your options for each program separate. Save the options in your nbgrader_config.py file. This will allow you to only maintain one config file. Canvas c.Canvas.course_url - str The URL of your Canvas distribution. Example: 'https://canvas.institution.edu' c.Canvas.course_id - int The Canvas ID of your course. If you open your course in canvas, this will appear as: https://canvas.institution.edu/courses/<course_id>/assignments c.Canvas.token_name ( str ) The name of the environment variable holding your Canvas Access Token . Default: 'CANVAS_TOKEN' c.Canvas.external_tool_name - str The name of your external tool in Canvas which represents your JupyterHub server. For more information read the ltiauthenticator documentation , which contains information on how to set up an external tool in Canvas. Default: 'Jupyter' c.Canvas.external_tool_level - str The level at which your external tool was created in Canvas. Acceptable values: ['course', 'account', 'group'] Default: 'course' Note : external_tool_name and external_tool_level are used to locate the ID of your external tool in Canvas to attach it to your assignment links. This links your LTI Consumer Key and LTI Consumer Secret to each launch request, authenticating your users. GitHub c.GitHub.ins_repo_url - str The location of your instructors repository where you will keep your solutions, graded assignments, and gradebook.db. Rudaux will detect the type of URL provided (HTTPS vs SSH). c.GitHub.stu_repo_url - str The location of your public student repository this will contain the release versions of your assignments. Rudaux will detect the type of URL provided (HTTPS vs SSH). c.GitHub.assignment_release_path - str The subpath of the student repository where assignments will be deposited. Default: 'materials' JupyterHub c.JupyterHub.hub_url - str The URL of your JupyterHub server. c.JupyterHub.base_url - str A JupyterHub prefix, if one is specified. In your jupyterhub_config.py, this would be named \"c.JupyterHub.base_url\" Default: \"\" ( an empty string ) Example: '/jupyter' c.JupyterHub.storage_path - str The location of your students' persistent storage. Example: '/tank/home/dsci100' c.JupyterHub.zfs - bool Are ZFS snapshots available? If so, we will utilize snapshotting to ensure that we are using a precise copy of the students' notebooks at the time the assignment closes. If not, we will simply read from the student directories. Default: False c.JupyterHub.zfs_regex - str A regular expression that matches your snapshot timestamp. Use None if the snapshot name is a timestamp. Default: r'\\d{4}-\\d{2}-\\d{2}-\\d{4}' c.JupyterHub.zfs_datetime_pattern - str The pattern of your timestamp in token format, for pendulum parsing: https://pendulum.eustace.io/docs/#tokens Default: 'YYYY-MM-DD-HHmm' Course c.Course.tmp_dir - str The temporary directory that rudaux will clone your students' repository into for assignment release. Default: '~/tmp' c.Course.timezone - str The timezone which your due dates will be set and parsed in. Example: 'US/Pacific' c.Course.grading_image The docker image you will use to run nbgrader autograding. This should essentially be a copy of your students' docker image, plus nbgrader. Example: 'ubcdsci/r-dsci-grading' Example Dockerfiles from DSCI 100: Student Container Marking Container c.Course.assignments A list of your assignments with the following fields: name - str Required. Unique. The name of the assignment. Must conform to nbgrader naming conventions (i.e. must be the name of the folder containing the jupyter notebook). Example: 'homework_1' duedate - str Required. The date the assignment is due. Example: '2019-03-14' duetime - str Optional. The time the assignment is due. Default: '23:59:59' points - int Optional. The maximum possible points for this assignment. Default: 1 manual - bool Optional. Does the assignment require manual input (i.e. TA feedback)? If so, feedback reports will not be generated and grades will not be submitted to Canvas automatically. Default: False Note : Rudaux parses datetimes with the pendulum library\u2014acceptable date strings are listed in the pendulum docs . For example, if duedate were '2019-03-14' and duetime were '22:00:00' , they would be joined and parsed as '2019-03-14T22:00:00' . Sample rudaux_config.py","title":"Config"},{"location":"config/#configuring-rudaux","text":"","title":"Configuring Rudaux"},{"location":"config/#assumptions","text":"Rudaux makes some important assumptions. In the future we hope to abstract away these assumptions. For reproducible provisioning of a compatible course infrastructure, see the DSCI 100 course infrastructure repository . You have a two-repository, instructors/students model for your course: The instructors repository contains everything that nbgrader needs to operate. The students repository just contains the release versions of assignments. You wish rudaux to pull, commit, and push to git on your behalf. This may be made optional . You have a Canvas Access Token in an environment variable accessible to rudaux. Because autograding is containerized, it is assumed your user will be able to execute docker run commands. If you schedule autograding : The machine you are executing rudaux commands on will be the same machine that autograding is executed on. If you wish to perform ZFS snapshotting : Rudaux does not perform ZFS snapshotting, but will look for a snapshot with the name of the assignment in question. Scheduling ZFS snapshots may be implemented . You have SSH keys or deploy keys set up for your repositories on the server you run rudaux. If you use HTTPS rather than SSH for git remotes, you will be prompted for your password. However, this will impair autograding.","title":"Assumptions"},{"location":"config/#configuration-options","text":"A configuration file should be included in the same directory where nbgrader operates. When creating your configuration file, you have two options: Save the options in a file named rudaux_config.py . This will keep your options for each program separate. Save the options in your nbgrader_config.py file. This will allow you to only maintain one config file.","title":"Configuration Options"},{"location":"config/#canvas","text":"c.Canvas.course_url - str The URL of your Canvas distribution. Example: 'https://canvas.institution.edu' c.Canvas.course_id - int The Canvas ID of your course. If you open your course in canvas, this will appear as: https://canvas.institution.edu/courses/<course_id>/assignments c.Canvas.token_name ( str ) The name of the environment variable holding your Canvas Access Token . Default: 'CANVAS_TOKEN' c.Canvas.external_tool_name - str The name of your external tool in Canvas which represents your JupyterHub server. For more information read the ltiauthenticator documentation , which contains information on how to set up an external tool in Canvas. Default: 'Jupyter' c.Canvas.external_tool_level - str The level at which your external tool was created in Canvas. Acceptable values: ['course', 'account', 'group'] Default: 'course' Note : external_tool_name and external_tool_level are used to locate the ID of your external tool in Canvas to attach it to your assignment links. This links your LTI Consumer Key and LTI Consumer Secret to each launch request, authenticating your users.","title":"Canvas"},{"location":"config/#github","text":"c.GitHub.ins_repo_url - str The location of your instructors repository where you will keep your solutions, graded assignments, and gradebook.db. Rudaux will detect the type of URL provided (HTTPS vs SSH). c.GitHub.stu_repo_url - str The location of your public student repository this will contain the release versions of your assignments. Rudaux will detect the type of URL provided (HTTPS vs SSH). c.GitHub.assignment_release_path - str The subpath of the student repository where assignments will be deposited. Default: 'materials'","title":"GitHub"},{"location":"config/#jupyterhub","text":"c.JupyterHub.hub_url - str The URL of your JupyterHub server. c.JupyterHub.base_url - str A JupyterHub prefix, if one is specified. In your jupyterhub_config.py, this would be named \"c.JupyterHub.base_url\" Default: \"\" ( an empty string ) Example: '/jupyter' c.JupyterHub.storage_path - str The location of your students' persistent storage. Example: '/tank/home/dsci100' c.JupyterHub.zfs - bool Are ZFS snapshots available? If so, we will utilize snapshotting to ensure that we are using a precise copy of the students' notebooks at the time the assignment closes. If not, we will simply read from the student directories. Default: False c.JupyterHub.zfs_regex - str A regular expression that matches your snapshot timestamp. Use None if the snapshot name is a timestamp. Default: r'\\d{4}-\\d{2}-\\d{2}-\\d{4}' c.JupyterHub.zfs_datetime_pattern - str The pattern of your timestamp in token format, for pendulum parsing: https://pendulum.eustace.io/docs/#tokens Default: 'YYYY-MM-DD-HHmm'","title":"JupyterHub"},{"location":"config/#course","text":"c.Course.tmp_dir - str The temporary directory that rudaux will clone your students' repository into for assignment release. Default: '~/tmp' c.Course.timezone - str The timezone which your due dates will be set and parsed in. Example: 'US/Pacific' c.Course.grading_image The docker image you will use to run nbgrader autograding. This should essentially be a copy of your students' docker image, plus nbgrader. Example: 'ubcdsci/r-dsci-grading' Example Dockerfiles from DSCI 100: Student Container Marking Container c.Course.assignments A list of your assignments with the following fields: name - str Required. Unique. The name of the assignment. Must conform to nbgrader naming conventions (i.e. must be the name of the folder containing the jupyter notebook). Example: 'homework_1' duedate - str Required. The date the assignment is due. Example: '2019-03-14' duetime - str Optional. The time the assignment is due. Default: '23:59:59' points - int Optional. The maximum possible points for this assignment. Default: 1 manual - bool Optional. Does the assignment require manual input (i.e. TA feedback)? If so, feedback reports will not be generated and grades will not be submitted to Canvas automatically. Default: False Note : Rudaux parses datetimes with the pendulum library\u2014acceptable date strings are listed in the pendulum docs . For example, if duedate were '2019-03-14' and duetime were '22:00:00' , they would be joined and parsed as '2019-03-14T22:00:00' . Sample rudaux_config.py","title":"Course"},{"location":"examples/","text":"Examples Here are examples API Usage How to use rudaux's modules in Python for greater functionality. from rudaux import Course , Assignment Course Operations Instantiate the course. dsci100 = Course ( '/home/jovyan/dsci100-instructors' ) Set up students, assignments, and schedule automatic grading. dsci100 \\ . get_external_tool_id () \\ . get_students_from_canvas () \\ . sync_nbgrader () \\ . assign ( overwrite = args . overwrite ) \\ . create_canvas_assignments () \\ . schedule_grading () Assignment Operations class DataScienceAssignment ( Assignment ): course = dsci100 homework_1 = DataScienceAssignment ( 'homework_1' ) Alternatively: homework_1 = Assignment ( 'homework_1' , course = dsci100 ) Example rudaux_config.py #=======================================# # Canvas # #=======================================# # The URL of your Canvas installation c . Canvas . canvas_url = 'https://canvas.ubc.ca' # The ID of your course in Canvas. If you open your course in canvas, this will # appear as: # https://canvas.institution.edu/courses/<course_id>/assignments c . Canvas . course_id = 5394 # The name of the environment variable storing you Canvas API Token # https://canvas.instructure.com/doc/api/file.oauth.html#manual-token-generation # Defaults to 'CANVAS_TOKEN' c . Canvas . token_name = 'CANVAS_TOKEN' # The name of the external tool in Canvas which represents your JupyterHub server # Defaults to \"Jupyter\" c . Canvas . external_tool_name = 'Jupyter' # The level at which your external tool was created in Canvas # Can be 'course', 'account' or 'group' # Defaults to \"course\" c . Canvas . external_tool_level = 'course' #=======================================# # GitHub # #=======================================# # The location of your instructors repository where you will keep your # solutions, graded assignments, and gradebook.db # c.GitHub.ins_repo_url = 'https://github.ubc.ca/hinshaws/dsci_100_instructors' c . GitHub . ins_repo_url = 'git@github.ubc.ca:hinshaws/DSCI_100_instructors.git' # The location of your public student repository # this will contain the release versions of your assignments # c.GitHub.stu_repo_url = 'https://github.com/samhinshaw/dsci-100' c . GitHub . stu_repo_url = 'git@github.com:samhinshaw/dsci-100.git' # the subpath of the student repository where assignments will be deposited. # defaults to 'materials' if none is specified c . GitHub . assignment_release_path = 'materials' # The following options are not currently supported # default if not specified is 'GITHUB_PAT' # c.GitHub.github_token_name = 'GHE_PAT' # You can specify multiple keys, just paste the url you specified above into the URL fields # c.GitHub.token_names = [ # { # \"url\": \"github.com\", # \"token_name\": \"GITHUB_PAT\" # }, # { # \"domain\": \"github.ubc.ca\", # \"token_name\": \"GHE_PAT\" # }, # ] #=======================================# # JupyterHub # #=======================================# # The URL that your JupyterHub is located at c . JupyterHub . hub_url = 'https://hub-prod-dsci.stat.ubc.ca' # Any hub prefix that you have specified. In your jupyterhub_config.py, this # would be named \"c.JupyterHub.base_url\" c . JupyterHub . base_url = '/jupyter' # The location of your students' persistent storage # c.JupyterHub.storage_path = '/tank/home/dsci100' c . JupyterHub . storage_path = '/nfs/hub-prod-dsc/' # temporarily changed # Is your persistent storage solution ZFS-based? (default: False) # If so, we will utilize snapshotting to ensure that we are using a precise copy # of the students' notebooks at the time the assignment closes. If not, we will # simply read from the student directories. c . JupyterHub . zfs = True # Optional. A regular expression that matches your snapshot timestamp. Use None if the snapshot name is a timestamp. c . JupyterHub . zfs_regex = r '\\d{4}-\\d{2}-\\d{2}-\\d{4}' # Optional. The pattern of your timestamp in token format, for pendulum parsing: # https://pendulum.eustace.io/docs/#tokens c . JupyterHub . zfs_datetime_pattern = 'YYYY-MM-DD-HHmm' #=======================================# # Course # #=======================================# # Defaults to $HOME/tmp # c.Course.tmp_dir = '~/tmp' # Timezone for which your due dates will be set and parsed c . Course . timezone = 'US/Pacific' # The docker image you will use to run nbgrader autograding. # This should essentially be a copy of your students' docker image, plus nbgrader. # We wrote our Dockerfile to inherit from our student's docker image. c . Course . grading_image = 'samhinshaw/r-dsci-grading' # c.Course.grading_image = 'ubcdsci/r-dsci-grading' #===============# # Assignments # #===============# # These must match the name of the folder containing the jupyter notebook in # your 'source' directory. If no points specified, defaults to 0 points. # NOTE: If no time specified for due date, defaults to 23:59:59. # We parse dates with the pendulum library, so you can see what date inputs are # acceptable in their docs: https://pendulum.eustace.io/docs/#rfc-3339 c . Course . assignments = [ { \"name\" : \"week_1\" , \"duedate\" : \"2019-08-14\" , \"duetime\" : \"23:59:59\" , \"points\" : 2 , \"manual\" : True }, { \"name\" : \"homework_1\" , \"duedate\" : \"2019-08-15\" , \"duetime\" : \"11:00:00\" , \"points\" : 5 }, { \"name\" : \"ps1\" , \"duedate\" : \"2019-08-15\" , \"duetime\" : \"15:31:00\" , \"points\" : 4 }, { \"name\" : \"week_2\" , \"duedate\" : \"2019-08-16\" , \"duetime\" : \"23:59:59\" , }, { \"name\" : \"homework_2\" , \"duedate\" : \"2019-08-16\" , \"duetime\" : \"06:00:00\" , \"points\" : 6 }, { \"name\" : \"week_6\" , \"duedate\" : \"2019-08-18\" , \"duetime\" : \"23:59:59\" , \"points\" : 2 , \"manual\" : True }, { \"name\" : \"week_7\" , \"duedate\" : \"2019-08-19\" , \"duetime\" : \"23:59:59\" , \"points\" : 3 }, ] LTI Launch Request { \"query_string\" : { \"custom_next\" : \"/jupyter/hub/user-redirect/git-pull?repo=https://github.com/binder-examples/requirements&subPath=index.ipynb\" }, \"form_data\" : { \"oauth_consumer_key\" : \"<redacted>\" , \"oauth_signature_method\" : \"HMAC-SHA1\" , \"oauth_timestamp\" : \"1529516978\" , \"oauth_nonce\" : \"<redacted>\" , \"oauth_version\" : \"1.0\" , \"context_id\" : \"df6178b861774822eec73639c1f5808ebf9b3259\" , \"context_label\" : \"DSCI100\" , \"context_title\" : \"DSCI 100\" , \"custom_canvas_api_domain\" : \"canvas.ubc.ca\" , \"custom_canvas_assignment_id\" : \"151504\" , \"custom_canvas_assignment_points_possible\" : \"0\" , \"custom_canvas_assignment_title\" : \"Example Assignment\" , \"custom_canvas_course_id\" : \"5394\" , \"custom_canvas_enrollment_state\" : \"active\" , \"custom_canvas_user_id\" : \"185091\" , \"custom_canvas_user_login_id\" : \"OB2D4G5QJS00\" , \"custom_canvas_workflow_state\" : \"claimed\" , \"custom_next\" : \"/jupyter/hub/user-redirect/git-pull?repo=https://github.com/binder-examples/requirements&subPath=index.ipynb\" , \"ext_ims_lis_basic_outcome_url\" : \"https://canvas.ubc.ca/api/lti/v1/tools/2399/ext_grade_passback\" , \"ext_lti_assignment_id\" : \"657aadda-f21d-41a3-9125-2fc67dc1e07e\" , \"ext_outcome_data_values_accepted\" : \"url,text\" , \"ext_outcome_result_total_score_accepted\" : \"true\" , \"ext_outcome_submission_submitted_at_accepted\" : \"true\" , \"ext_outcomes_tool_placement_url\" : \"https://canvas.ubc.ca/api/lti/v1/turnitin/outcomes_placement/2399\" , \"ext_roles\" : \"urn:lti:instrole:ims/lis/Instructor,urn:lti:instrole:ims/lis/Student,urn:lti:role:ims/lis/Instructor,urn:lti:sysrole:ims/lis/User\" , \"launch_presentation_document_target\" : \"iframe\" , \"launch_presentation_locale\" : \"en-CA\" , \"launch_presentation_return_url\" : \"https://canvas.ubc.ca/courses/5394/external_content/success/external_tool_redirect\" , \"lis_outcome_service_url\" : \"https://canvas.ubc.ca/api/lti/v1/tools/2399/grade_passback\" , \"lis_person_contact_email_primary\" : \"samuel.hinshaw@gmail.com\" , \"lis_person_name_family\" : \"Hinshaw\" , \"lis_person_name_full\" : \"Samuel Hinshaw\" , \"lis_person_name_given\" : \"Samuel\" , \"lis_person_sourcedid\" : \"90088155\" , \"lti_message_type\" : \"basic-lti-launch-request\" , \"lti_version\" : \"LTI-1p0\" , \"oauth_callback\" : \"about:blank\" , \"resource_link_id\" : \"954efa27cf26a83ebcb782eeb701c904cc93cd6d\" , \"resource_link_title\" : \"Example Assignment\" , \"roles\" : \"Instructor\" , \"tool_consumer_info_product_family_code\" : \"canvas\" , \"tool_consumer_info_version\" : \"cloud\" , \"tool_consumer_instance_contact_email\" : \"notifications@instructure.com\" , \"tool_consumer_instance_guid\" : \"WiYEKZJIYozJ60jtONj9XJdFwpxtMAY075lLT4pj:canvas-lms\" , \"tool_consumer_instance_name\" : \"The University of British Columbia\" , \"user_id\" : \"56adf6953222e4ac2d851361684c73f392b55260\" , \"user_image\" : \"https://canvas.ubc.ca/images/thumbnails/760593/qr2ss6cgf7q1SCbCH8axswflnIfFZep5XNIkNTEB\" , \"oauth_signature\" : \"<redacted>\" } }","title":"Examples"},{"location":"examples/#examples","text":"Here are examples","title":"Examples"},{"location":"examples/#api-usage","text":"How to use rudaux's modules in Python for greater functionality. from rudaux import Course , Assignment","title":"API Usage"},{"location":"examples/#course-operations","text":"Instantiate the course. dsci100 = Course ( '/home/jovyan/dsci100-instructors' ) Set up students, assignments, and schedule automatic grading. dsci100 \\ . get_external_tool_id () \\ . get_students_from_canvas () \\ . sync_nbgrader () \\ . assign ( overwrite = args . overwrite ) \\ . create_canvas_assignments () \\ . schedule_grading ()","title":"Course Operations"},{"location":"examples/#assignment-operations","text":"class DataScienceAssignment ( Assignment ): course = dsci100 homework_1 = DataScienceAssignment ( 'homework_1' ) Alternatively: homework_1 = Assignment ( 'homework_1' , course = dsci100 )","title":"Assignment Operations"},{"location":"examples/#example-rudaux_configpy","text":"#=======================================# # Canvas # #=======================================# # The URL of your Canvas installation c . Canvas . canvas_url = 'https://canvas.ubc.ca' # The ID of your course in Canvas. If you open your course in canvas, this will # appear as: # https://canvas.institution.edu/courses/<course_id>/assignments c . Canvas . course_id = 5394 # The name of the environment variable storing you Canvas API Token # https://canvas.instructure.com/doc/api/file.oauth.html#manual-token-generation # Defaults to 'CANVAS_TOKEN' c . Canvas . token_name = 'CANVAS_TOKEN' # The name of the external tool in Canvas which represents your JupyterHub server # Defaults to \"Jupyter\" c . Canvas . external_tool_name = 'Jupyter' # The level at which your external tool was created in Canvas # Can be 'course', 'account' or 'group' # Defaults to \"course\" c . Canvas . external_tool_level = 'course' #=======================================# # GitHub # #=======================================# # The location of your instructors repository where you will keep your # solutions, graded assignments, and gradebook.db # c.GitHub.ins_repo_url = 'https://github.ubc.ca/hinshaws/dsci_100_instructors' c . GitHub . ins_repo_url = 'git@github.ubc.ca:hinshaws/DSCI_100_instructors.git' # The location of your public student repository # this will contain the release versions of your assignments # c.GitHub.stu_repo_url = 'https://github.com/samhinshaw/dsci-100' c . GitHub . stu_repo_url = 'git@github.com:samhinshaw/dsci-100.git' # the subpath of the student repository where assignments will be deposited. # defaults to 'materials' if none is specified c . GitHub . assignment_release_path = 'materials' # The following options are not currently supported # default if not specified is 'GITHUB_PAT' # c.GitHub.github_token_name = 'GHE_PAT' # You can specify multiple keys, just paste the url you specified above into the URL fields # c.GitHub.token_names = [ # { # \"url\": \"github.com\", # \"token_name\": \"GITHUB_PAT\" # }, # { # \"domain\": \"github.ubc.ca\", # \"token_name\": \"GHE_PAT\" # }, # ] #=======================================# # JupyterHub # #=======================================# # The URL that your JupyterHub is located at c . JupyterHub . hub_url = 'https://hub-prod-dsci.stat.ubc.ca' # Any hub prefix that you have specified. In your jupyterhub_config.py, this # would be named \"c.JupyterHub.base_url\" c . JupyterHub . base_url = '/jupyter' # The location of your students' persistent storage # c.JupyterHub.storage_path = '/tank/home/dsci100' c . JupyterHub . storage_path = '/nfs/hub-prod-dsc/' # temporarily changed # Is your persistent storage solution ZFS-based? (default: False) # If so, we will utilize snapshotting to ensure that we are using a precise copy # of the students' notebooks at the time the assignment closes. If not, we will # simply read from the student directories. c . JupyterHub . zfs = True # Optional. A regular expression that matches your snapshot timestamp. Use None if the snapshot name is a timestamp. c . JupyterHub . zfs_regex = r '\\d{4}-\\d{2}-\\d{2}-\\d{4}' # Optional. The pattern of your timestamp in token format, for pendulum parsing: # https://pendulum.eustace.io/docs/#tokens c . JupyterHub . zfs_datetime_pattern = 'YYYY-MM-DD-HHmm' #=======================================# # Course # #=======================================# # Defaults to $HOME/tmp # c.Course.tmp_dir = '~/tmp' # Timezone for which your due dates will be set and parsed c . Course . timezone = 'US/Pacific' # The docker image you will use to run nbgrader autograding. # This should essentially be a copy of your students' docker image, plus nbgrader. # We wrote our Dockerfile to inherit from our student's docker image. c . Course . grading_image = 'samhinshaw/r-dsci-grading' # c.Course.grading_image = 'ubcdsci/r-dsci-grading' #===============# # Assignments # #===============# # These must match the name of the folder containing the jupyter notebook in # your 'source' directory. If no points specified, defaults to 0 points. # NOTE: If no time specified for due date, defaults to 23:59:59. # We parse dates with the pendulum library, so you can see what date inputs are # acceptable in their docs: https://pendulum.eustace.io/docs/#rfc-3339 c . Course . assignments = [ { \"name\" : \"week_1\" , \"duedate\" : \"2019-08-14\" , \"duetime\" : \"23:59:59\" , \"points\" : 2 , \"manual\" : True }, { \"name\" : \"homework_1\" , \"duedate\" : \"2019-08-15\" , \"duetime\" : \"11:00:00\" , \"points\" : 5 }, { \"name\" : \"ps1\" , \"duedate\" : \"2019-08-15\" , \"duetime\" : \"15:31:00\" , \"points\" : 4 }, { \"name\" : \"week_2\" , \"duedate\" : \"2019-08-16\" , \"duetime\" : \"23:59:59\" , }, { \"name\" : \"homework_2\" , \"duedate\" : \"2019-08-16\" , \"duetime\" : \"06:00:00\" , \"points\" : 6 }, { \"name\" : \"week_6\" , \"duedate\" : \"2019-08-18\" , \"duetime\" : \"23:59:59\" , \"points\" : 2 , \"manual\" : True }, { \"name\" : \"week_7\" , \"duedate\" : \"2019-08-19\" , \"duetime\" : \"23:59:59\" , \"points\" : 3 }, ]","title":"Example rudaux_config.py"},{"location":"examples/#lti-launch-request","text":"{ \"query_string\" : { \"custom_next\" : \"/jupyter/hub/user-redirect/git-pull?repo=https://github.com/binder-examples/requirements&subPath=index.ipynb\" }, \"form_data\" : { \"oauth_consumer_key\" : \"<redacted>\" , \"oauth_signature_method\" : \"HMAC-SHA1\" , \"oauth_timestamp\" : \"1529516978\" , \"oauth_nonce\" : \"<redacted>\" , \"oauth_version\" : \"1.0\" , \"context_id\" : \"df6178b861774822eec73639c1f5808ebf9b3259\" , \"context_label\" : \"DSCI100\" , \"context_title\" : \"DSCI 100\" , \"custom_canvas_api_domain\" : \"canvas.ubc.ca\" , \"custom_canvas_assignment_id\" : \"151504\" , \"custom_canvas_assignment_points_possible\" : \"0\" , \"custom_canvas_assignment_title\" : \"Example Assignment\" , \"custom_canvas_course_id\" : \"5394\" , \"custom_canvas_enrollment_state\" : \"active\" , \"custom_canvas_user_id\" : \"185091\" , \"custom_canvas_user_login_id\" : \"OB2D4G5QJS00\" , \"custom_canvas_workflow_state\" : \"claimed\" , \"custom_next\" : \"/jupyter/hub/user-redirect/git-pull?repo=https://github.com/binder-examples/requirements&subPath=index.ipynb\" , \"ext_ims_lis_basic_outcome_url\" : \"https://canvas.ubc.ca/api/lti/v1/tools/2399/ext_grade_passback\" , \"ext_lti_assignment_id\" : \"657aadda-f21d-41a3-9125-2fc67dc1e07e\" , \"ext_outcome_data_values_accepted\" : \"url,text\" , \"ext_outcome_result_total_score_accepted\" : \"true\" , \"ext_outcome_submission_submitted_at_accepted\" : \"true\" , \"ext_outcomes_tool_placement_url\" : \"https://canvas.ubc.ca/api/lti/v1/turnitin/outcomes_placement/2399\" , \"ext_roles\" : \"urn:lti:instrole:ims/lis/Instructor,urn:lti:instrole:ims/lis/Student,urn:lti:role:ims/lis/Instructor,urn:lti:sysrole:ims/lis/User\" , \"launch_presentation_document_target\" : \"iframe\" , \"launch_presentation_locale\" : \"en-CA\" , \"launch_presentation_return_url\" : \"https://canvas.ubc.ca/courses/5394/external_content/success/external_tool_redirect\" , \"lis_outcome_service_url\" : \"https://canvas.ubc.ca/api/lti/v1/tools/2399/grade_passback\" , \"lis_person_contact_email_primary\" : \"samuel.hinshaw@gmail.com\" , \"lis_person_name_family\" : \"Hinshaw\" , \"lis_person_name_full\" : \"Samuel Hinshaw\" , \"lis_person_name_given\" : \"Samuel\" , \"lis_person_sourcedid\" : \"90088155\" , \"lti_message_type\" : \"basic-lti-launch-request\" , \"lti_version\" : \"LTI-1p0\" , \"oauth_callback\" : \"about:blank\" , \"resource_link_id\" : \"954efa27cf26a83ebcb782eeb701c904cc93cd6d\" , \"resource_link_title\" : \"Example Assignment\" , \"roles\" : \"Instructor\" , \"tool_consumer_info_product_family_code\" : \"canvas\" , \"tool_consumer_info_version\" : \"cloud\" , \"tool_consumer_instance_contact_email\" : \"notifications@instructure.com\" , \"tool_consumer_instance_guid\" : \"WiYEKZJIYozJ60jtONj9XJdFwpxtMAY075lLT4pj:canvas-lms\" , \"tool_consumer_instance_name\" : \"The University of British Columbia\" , \"user_id\" : \"56adf6953222e4ac2d851361684c73f392b55260\" , \"user_image\" : \"https://canvas.ubc.ca/images/thumbnails/760593/qr2ss6cgf7q1SCbCH8axswflnIfFZep5XNIkNTEB\" , \"oauth_signature\" : \"<redacted>\" } }","title":"LTI Launch Request"}]}